package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"

	"github.com/atuning120/proyectoIntegradorSoftwareCompass/ms-historial/internal/consumer"
	"github.com/atuning120/proyectoIntegradorSoftwareCompass/ms-historial/internal/database"
	"github.com/atuning120/proyectoIntegradorSoftwareCompass/ms-historial/internal/graph/model"
	"github.com/atuning120/proyectoIntegradorSoftwareCompass/ms-historial/internal/repository"
	"github.com/atuning120/proyectoIntegradorSoftwareCompass/ms-historial/internal/service"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CrearHistorial is the resolver for the crearHistorial field.
func (r *mutationResolver) CrearHistorial(ctx context.Context, idUsuario string, idProductos []string) (*model.Historial, error) {
	consumer.ValidarUsuarioRPC(idUsuario)
	for _, idProducto := range idProductos {
		consumer.ValidarProductoRPC(idProducto)
	}

	client, err := database.ConnectToMongoDB()
	if err != nil {
		return nil, err
	}
	defer client.Disconnect(context.Background())

	database := client.Database("Historial")
	historialRepository := repository.NewHistorialRepositoryImpl(database)
	historialService := service.NewHistorialServiceImpl(historialRepository)

	caparazon, err := historialService.CrearHistorial(ctx, idUsuario, idProductos)
	if err != nil {
		return nil, fmt.Errorf("error al crear historial: %v", err)
	}

	idProductos = ConvertObjectIDsToHex(caparazon.IDProductos)

	historial := &model.Historial{
		IDUsuario:   caparazon.UsuarioID.Hex(),
		Fecha:       caparazon.Fecha.Time().String(),
		IDProductos: idProductos,
	}

	return historial, nil
}

// ObtenerHistoriales is the resolver for the ObtenerHistoriales field.
func (r *queryResolver) ObtenerHistoriales(ctx context.Context) ([]*model.Historial, error) {
	client, err := database.ConnectToMongoDB()
	if err != nil {
		return nil, err
	}
	defer client.Disconnect(context.Background())

	database := client.Database("Historial")
	historialRepository := repository.NewHistorialRepositoryImpl(database)
	historialService := service.NewHistorialServiceImpl(historialRepository)

	caparazones, err := historialService.ObtenerHistoriales(ctx)
	if err != nil {
		return nil, fmt.Errorf("error al obtener historiales: %v", err)
	}

	var historiales []*model.Historial
	for _, caparazon := range caparazones {
		idProductos := ConvertObjectIDsToHex(caparazon.IDProductos)

		historial := &model.Historial{
			ID:          caparazon.ID.Hex(),
			IDUsuario:   caparazon.UsuarioID.Hex(),
			Fecha:       caparazon.Fecha.Time().String(),
			IDProductos: idProductos,
		}

		historiales = append(historiales, historial)
	}

	return historiales, nil
}

// ObtenerHistorialPorUsuario is the resolver for the ObtenerHistorialPorUsuario field.
func (r *queryResolver) ObtenerHistorialPorUsuario(ctx context.Context, idUsuario string) ([]*model.Historial, error) {
	consumer.ValidarUsuarioRPC(idUsuario)

	client, err := database.ConnectToMongoDB()
	if err != nil {
		return nil, err
	}
	defer client.Disconnect(context.Background())

	database := client.Database("Historial")
	historialRepository := repository.NewHistorialRepositoryImpl(database)
	historialService := service.NewHistorialServiceImpl(historialRepository)

	caparazones, err := historialService.ObtenerHistorialPorID(ctx, idUsuario)
	if err != nil {
		return nil, fmt.Errorf("error al obtener historiales por idUsuario: %v", err)
	}

	var historiales []*model.Historial
	for _, caparazon := range caparazones {
		idProductos := ConvertObjectIDsToHex(caparazon.IDProductos)

		historial := &model.Historial{
			ID:          caparazon.ID.Hex(),
			IDUsuario:   caparazon.UsuarioID.Hex(),
			Fecha:       caparazon.Fecha.Time().String(),
			IDProductos: idProductos,
		}

		historiales = append(historiales, historial)
	}

	return historiales, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

func ConvertObjectIDsToHex(objectIDs []primitive.ObjectID) []string {
	var hexStrings []string
	for _, objectID := range objectIDs {
		hexStrings = append(hexStrings, objectID.Hex())
	}
	return hexStrings
}
